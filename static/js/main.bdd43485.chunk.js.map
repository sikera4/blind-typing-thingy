{"version":3,"sources":["hooks/useKeyPress.ts","utils/time.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useKeyPress","callback","useState","keyPressed","setKeyPressed","useEffect","downHandler","key","length","upHandler","window","addEventListener","removeEventListener","currentTime","Date","getTime","App","startTime","setStartTime","signCount","setSignCount","wordCount","setWordCount","spm","setSpm","wpm","setWpm","accuracy","setAccuracy","typedChars","setTypedChars","text","setText","Array","fill","join","leftPadding","setLeftPadding","outgoingChars","setOutgoingChars","currentChar","setCurrentChar","incomingChars","setIncomingChars","wrongChar","setWrongChar","api","setApi","fetchProvoker","setFetchProvoker","fetch","then","res","status","Error","json","data","neededText","content","quote","charAt","substr","catch","err","alert","message","updatedOutgoingChars","updatedIncomingChars","durationInMinutes","toFixed","substring","updatedTypedChars","className","slice","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bdd43485.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\n\nconst useKeyPress = (callback: (arg: string | null) => void) => {\n\n  const [keyPressed, setKeyPressed] = useState<string | null>();\n\n  useEffect(() => {\n\n    interface Key {\n      key: string;\n    }\n    const downHandler = ({ key }: Key) => {\n      if (keyPressed !== key && key.length === 1) {\n        setKeyPressed(key);\n        callback && callback(key);\n      }\n    };\n\n    const upHandler = () => {\n      setKeyPressed(null);\n    };\n\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  });\n  return keyPressed;\n};\n\nexport default useKeyPress;","export const currentTime = (): number => new Date().getTime();","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport useKeyPress from './hooks/useKeyPress';\nimport { currentTime } from './utils/time';\n\nfunction App() {\n  // states for stats (Sign per minute and words per minute)\n  const [startTime, setStartTime] = useState<number>();\n  const [signCount, setSignCount] = useState<number>(0);\n  const [wordCount, setWordCount] = useState<number>(0);\n  const [spm, setSpm] = useState<string>('0');\n  const [wpm, setWpm] = useState<string>('0');\n  const [accuracy, setAccuracy] = useState<string>('0');\n  const [typedChars, setTypedChars] = useState<string>('');\n\n  // states for the typable text\n  const [text, setText] = useState<string>('');\n  const [leftPadding, setLeftPadding] = useState<string>(new Array(20).fill(' ').join(''));\n  const [outgoingChars, setOutgoingChars] = useState<string>('');\n  const [currentChar, setCurrentChar] = useState<string>('');\n  const [incomingChars, setIncomingChars] = useState<string>('');\n  \n  // state for wrong char reaction\n  const [wrongChar, setWrongChar] = useState<boolean>(false);\n\n  // states for data fetching\n  const [api, setApi] = useState<string>('https://animechan.vercel.app/api/random');\n  const [fetchProvoker, setFetchProvoker] = useState<number>(0);\n  \n  // data fetcher\n  useEffect(() => {\n    fetch(api)\n    .then((res) => {\n      if (res.status !== 200) {\n        throw new Error(\"Couldn't fetch the data\");\n      }\n      return res.json();\n    })\n    .then(data => {\n      let neededText = '';\n      if (api === 'https://api.quotable.io/random') {\n        neededText = data.content;\n      } else {\n        neededText = data.quote; \n      }\n      setText(neededText);\n      setCurrentChar(neededText.charAt(0));\n      setIncomingChars(neededText.substr(1));\n    }).catch(err => alert(`Something went wrong: ${err.message}`));\n  }, [api, fetchProvoker])\n  \n  // callback that includes typing checker functionality\n  useKeyPress((key) => {\n    let updatedOutgoingChars:string = outgoingChars;\n    let updatedIncomingChars:string = incomingChars;\n    \n    if (!startTime) {\n      setStartTime(currentTime());\n    }\n\n    if (key === currentChar) {\n\n      setWrongChar(false);\n\n      setSignCount(signCount + 1);\n\n      if (incomingChars.charAt(0) === ' ') {\n        setWordCount(wordCount + 1);\n        const durationInMinutes: number = (currentTime() - startTime!) / 60000.0;\n\n        setWpm(((wordCount + 1) / durationInMinutes).toFixed(2));\n        setSpm(((signCount + 1) / durationInMinutes).toFixed(2));\n      }\n\n      if (leftPadding.length > 0) {\n        setLeftPadding(leftPadding.substring(1));\n      }\n\n      updatedOutgoingChars += currentChar;\n      setOutgoingChars(updatedOutgoingChars);\n          \n      setCurrentChar(incomingChars.charAt(0));\n      \n      updatedIncomingChars = incomingChars.substring(1);\n      setIncomingChars(updatedIncomingChars);\n    } else {\n      setWrongChar(true);\n    }\n    // setting up accuracy\n    const updatedTypedChars = typedChars + key;\n    setTypedChars(updatedTypedChars);\n    setAccuracy(\n      ((updatedOutgoingChars.length * 100) / updatedTypedChars.length).toFixed(2)\n    );\n  })\n\n  return (\n    <div className=\"App\">\n      <main className=\"App-body\">\n        <h1 className=\"header\">BLIND TYPING THINGY</h1>\n        <h2 className=\"facey\">(Í â‰– ÍœÊ–Í â‰–)ðŸ‘Œ</h2>\n        <p className= \"whole-string\">This is what you are going to type, enjoy (anime quotes by default xD): '{text}'</p>\n        <p className=\"Character\">\n          <span className=\"Character-out\">\n            {(leftPadding + outgoingChars).slice(-20)}\n          </span>\n          <span className={wrongChar ? \"Character-current-wrong\" : \"Character-current\"}>{currentChar}</span>\n          <span>{incomingChars.substr(0, 20)}</span>\n        </p>\n        <h3 className=\"stats\">Signs Per Minute: {spm} | Words Per Minute: {wpm}</h3>\n        <p>\n          <span className=\"speedometer-reseter\" onClick={() => {\n            setStartTime(currentTime());\n            setWordCount(0);\n            setSignCount(0);\n            setWpm('0');\n            setSpm('0');\n            }}>Reset speed counters\n          </span>\n          <span className=\"outChars-reseter\" onClick={() => {\n            setLeftPadding(new Array(20).fill(' ').join(''));\n            setTypedChars('');\n            setOutgoingChars('');\n            setAccuracy('0');\n            }}>Clear typed characters and reset accuracy\n          </span>\n        </p>\n        <h3 className=\"stats\">Accuracy: {accuracy}%</h3>\n        <p>{(currentChar === '') ? \"Please choose what you'd like to type next:\": ''}</p>\n        <p className='commentary'>You can choose what you want to type from a WIDE range of opportunities! What are you interested in?</p>\n        <p className='api-changers'>\n          <span className=\"api-changer\" onClick={() => {\n            setApi('https://api.quotable.io/random');\n            setFetchProvoker(fetchProvoker + 1);\n            }}>Some deep thoughts...</span>\n          <span className=\"api-changer\" onClick={() => {\n            setApi('https://animechan.vercel.app/api/random');\n            setFetchProvoker(fetchProvoker + 1);\n            }}>Anime quotes!</span>\n          <span className=\"api-changer\" onClick={() => {\n            setApi('https://api.kanye.rest');\n            setFetchProvoker(fetchProvoker + 1);\n            }}>Maybe... Kanye West quotes?..</span>\n        </p>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}