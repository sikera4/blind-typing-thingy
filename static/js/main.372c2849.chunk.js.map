{"version":3,"sources":["hooks/useKeyPress.ts","utils/time.ts","components/apiChanger.tsx","components/resetterButtons.tsx","components/character.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useKeyPress","callback","useState","keyPressed","setKeyPressed","useEffect","downHandler","key","length","upHandler","window","addEventListener","removeEventListener","currentTime","Date","getTime","ApiChangers","handleApiChangerClick","className","onClick","ResetterButtons","handleSpeedometerResetterClick","handleOutCharsResetterClick","Character","props","leftPadding","outgoingChars","slice","wrongChar","currentChar","incomingChars","substr","App","startTime","setStartTime","signCount","setSignCount","wordCount","setWordCount","spm","setSpm","wpm","setWpm","accuracy","setAccuracy","typedChars","setTypedChars","text","setText","Array","fill","join","setLeftPadding","setOutgoingChars","setCurrentChar","setIncomingChars","setWrongChar","api","setApi","fetchProvoker","setFetchProvoker","fetch","then","res","status","Error","json","data","neededText","content","quote","charAt","catch","err","alert","message","updatedOutgoingChars","updatedIncomingChars","durationInMinutes","toFixed","substring","updatedTypedChars","apiUrl","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.372c2849.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\n\nconst useKeyPress = (callback: (arg: string | null) => void) => {\n\n  const [keyPressed, setKeyPressed] = useState<string | null>();\n\n  useEffect(() => {\n\n    interface Key {\n      key: string;\n    }\n    const downHandler = ({ key }: Key) => {\n      if (keyPressed !== key && key.length === 1) {\n        setKeyPressed(key);\n        callback && callback(key);\n      }\n    };\n\n    const upHandler = () => {\n      setKeyPressed(null);\n    };\n\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  });\n  return keyPressed;\n};\n\nexport default useKeyPress;","export const currentTime = (): number => new Date().getTime();","type ApiChangerFunction = (apiUrl: string) => void;\n\nconst ApiChangers = ({handleApiChangerClick}:{handleApiChangerClick: ApiChangerFunction}) => {\n  return (\n    <p className='api-changers'>\n      <span className=\"api-changer\" onClick={() => {\n        handleApiChangerClick('https://api.quotable.io/random');\n        }}>Some deep thoughts...</span>\n      <span className=\"api-changer\" onClick={() => {\n        handleApiChangerClick('https://animechan.vercel.app/api/random');\n        }}>Anime quotes!</span>\n      <span className=\"api-changer\" onClick={() => {\n        handleApiChangerClick('https://api.kanye.rest');\n        }}>Maybe... Kanye West quotes?..</span>\n      </p>\n  );\n}\n\nexport default ApiChangers;","type ResetterFunctionType = () => void;\n\nconst ResetterButtons = ({handleSpeedometerResetterClick, handleOutCharsResetterClick}: {handleSpeedometerResetterClick: ResetterFunctionType, \nhandleOutCharsResetterClick: ResetterFunctionType}) => {\n  return (\n    <p>\n      <span className=\"speedometer-resetter\" onClick={() => {\n        handleSpeedometerResetterClick();\n        }}>Reset speed counters\n      </span>\n      <span className=\"outChars-resetter\" onClick={() => {\n        handleOutCharsResetterClick();\n        }}>Clear typed characters and reset accuracy\n      </span>\n    </p>\n  );\n}\n\nexport default ResetterButtons;","interface CharacterInterface {\n  leftPadding: string;\n  outgoingChars: string;\n  wrongChar: boolean;\n  currentChar: string;\n  incomingChars: string;\n}\n\nconst Character = (props: CharacterInterface) => {\n  return (\n    <p className=\"Character\">\n      <span className=\"Character-out\">\n        {(props.leftPadding + props.outgoingChars).slice(-20)}\n      </span>\n      <span className={props.wrongChar ? \"Character-current-wrong\" : \"Character-current\"}>{props.currentChar}</span>\n      <span>{props.incomingChars.substr(0, 20)}</span>\n    </p>\n  )\n}\n\nexport default Character;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport useKeyPress from './hooks/useKeyPress';\nimport { currentTime } from './utils/time';\nimport ApiChangers from './components/apiChanger';\nimport ResetterButtons from './components/resetterButtons';\nimport Character from './components/character';\n\nfunction App() {\n  // states for stats (sign per minute, words per minute and accuracy)\n  const [startTime, setStartTime] = useState<number>();\n  const [signCount, setSignCount] = useState<number>(0);\n  const [wordCount, setWordCount] = useState<number>(0);\n  const [spm, setSpm] = useState<string>('0');\n  const [wpm, setWpm] = useState<string>('0');\n  const [accuracy, setAccuracy] = useState<string>('0');\n  const [typedChars, setTypedChars] = useState<string>('');\n\n  // states for the typable text\n  const [text, setText] = useState<string>('');\n  const [leftPadding, setLeftPadding] = useState<string>(new Array(20).fill(' ').join(''));\n  const [outgoingChars, setOutgoingChars] = useState<string>('');\n  const [currentChar, setCurrentChar] = useState<string>('');\n  const [incomingChars, setIncomingChars] = useState<string>('');\n  \n  // state for wrong char reaction\n  const [wrongChar, setWrongChar] = useState<boolean>(false);\n\n  // states for data fetching\n  const [api, setApi] = useState<string>('https://animechan.vercel.app/api/random');\n  const [fetchProvoker, setFetchProvoker] = useState<number>(0);\n  \n  // data fetcher\n  useEffect(() => {\n    fetch(api)\n    .then((res) => {\n      if (res.status !== 200) {\n        throw new Error(\"Couldn't fetch the data\");\n      }\n      return res.json();\n    })\n    .then(data => {\n      let neededText = '';\n      if (api === 'https://api.quotable.io/random') {\n        neededText = data.content;\n      } else {\n        neededText = data.quote; \n      }\n      setText(neededText);\n      setCurrentChar(neededText.charAt(0));\n      setIncomingChars(neededText.substr(1));\n    }).catch(err => alert(`Something went wrong: ${err.message}`));\n  }, [api, fetchProvoker])\n  \n  // callback that includes typing checker functionality\n  useKeyPress((key) => {\n    let updatedOutgoingChars:string = outgoingChars;\n    let updatedIncomingChars:string = incomingChars;\n    \n    if (!startTime) {\n      setStartTime(currentTime());\n    }\n\n    if (key === currentChar) {\n\n      setWrongChar(false);\n\n      setSignCount(signCount + 1);\n\n      if (incomingChars.charAt(0) === ' ') {\n        setWordCount(wordCount + 1);\n        const durationInMinutes: number = (currentTime() - startTime!) / 60000.0;\n\n        setWpm(((wordCount + 1) / durationInMinutes).toFixed(2));\n        setSpm(((signCount + 1) / durationInMinutes).toFixed(2));\n      }\n\n      if (leftPadding.length > 0) {\n        setLeftPadding(leftPadding.substring(1));\n      }\n\n      updatedOutgoingChars += currentChar;\n      setOutgoingChars(updatedOutgoingChars);\n          \n      setCurrentChar(incomingChars.charAt(0));\n      \n      updatedIncomingChars = incomingChars.substring(1);\n      setIncomingChars(updatedIncomingChars);\n    } else {\n      setWrongChar(true);\n    }\n    // setting up accuracy\n    const updatedTypedChars = typedChars + key;\n    setTypedChars(updatedTypedChars);\n    setAccuracy(\n      ((updatedOutgoingChars.length * 100) / updatedTypedChars.length).toFixed(2)\n    );\n  })\n\n  // functions for interactive components\n  const handleApiChangerClick = (apiUrl: string) => {\n    setApi(apiUrl);\n    setFetchProvoker(fetchProvoker + 1);\n  }\n\n  const handleSpeedometerResetterClick = (): void => {\n    setStartTime(currentTime());\n    setWordCount(0);\n    setSignCount(0);\n    setWpm('0');\n    setSpm('0');\n  }\n\n  const handleOutCharsResetterClick = (): void => {\n    setLeftPadding(new Array(20).fill(' ').join(''));\n    setTypedChars('');\n    setOutgoingChars('');\n    setAccuracy('0');\n  }\n\n  return (\n    <div className=\"App\">\n      <main className=\"App-body\">\n        <h1 className=\"header\">BLIND TYPING THINGY</h1>\n        <h2 className=\"facey\">(͠≖ ͜ʖ͠≖)👌</h2>\n        <p className= \"whole-string\">{text ? `This is what you are going to type, enjoy (anime quotes by default xD): ${text}` : 'Loading...'}</p>\n        <Character \n        leftPadding={leftPadding} \n        outgoingChars={outgoingChars} \n        wrongChar={wrongChar}\n        currentChar={currentChar}\n        incomingChars={incomingChars}/>\n        <h3 className=\"stats\">Signs Per Minute: {spm} | Words Per Minute: {wpm}</h3>\n        <ResetterButtons \n        handleSpeedometerResetterClick={handleSpeedometerResetterClick} \n        handleOutCharsResetterClick={handleOutCharsResetterClick}/>\n        <h3 className=\"stats\">Accuracy: {accuracy}%</h3>\n        <p>{(currentChar === '') ? \"Please choose what you'd like to type next:\": ''}</p>\n        <p className='commentary'>You can choose what you want to type from a WIDE range of opportunities! What are you interested in?</p>\n        <ApiChangers handleApiChangerClick={handleApiChangerClick}/>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}